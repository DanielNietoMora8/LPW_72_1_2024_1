# -*- coding: utf-8 -*-
"""POO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p9d2I6PKKqOIEJgeMQz4DRA2VV_LNeG2
"""

import numpy as np
import matplotlib.pyplot as plt
from IPython.display import clear_output
clear_output()



def suma(*args):
    resultado=0
    for i in args:
        resultado+=i
    return resultado

def concatenate(p,**kwargs):
    result = ""
    # Iterating over the Python kwargs dictionary
    for i in kwargs.keys():
        print(i)
    for i in kwargs.values():
        result += i

    print("p es", p)
    return result

concatenate(cualquiercosa="Mundo", otraclave="soy Daniel", p="Hola")

def function_spectrogram(**kwargs):
    library="pydub"
    if "librosa" in kwargs.keys() and kwargs["librosa"]==True:
        library = "librosa"
    elif "soundfile" in kwargs.keys() and kwargs["soundfile"]==True:
        library = "soundfile"

    if library=="librosa":
        print("usando librosa")
        # audio, sr = librosa.load(root_audio)
    elif library=="soundfile":
        print("usando soundfile")
        # audio, sr = sf.load(root_audio)
    else:
        print("usando pydub")

    if "sr" in kwargs.keys():
        sr = kwargs["sr"]
        print("usando sr igual a", sr)

function_spectrogram(librosa=True, sr=22050)

class mascota:
    def __init__(self, color, especie="Perro", tamaño="Medio"):
        self.color = color
        self.nombre = None
        self.__especie = especie
        self.tamaño = tamaño
        self.edad = 0
        self.vacuna = False
        self.__fecha_vacuna = 0

    def registrar(self, nombre):
        self.nombre = nombre

    def vacunar(self):
        if(self.vacuna == False):
            print("vacunando mascota")
            self.vacuna = True
            print("mascota vacunada excitosamente")
            self.__fecha_vacuna = np.random.randint(1,12,1)
            print(self.__fecha_vacuna)

        else:
            print("Su mascota no requiere vacunarse, vuelva en un año")

    def asignar_edad(self, edad):
        self.edad = edad

    def seguimiento_vacuna(self, fecha):
        if((self.__fecha_vacuna-fecha)<0):
            self.vacuna = False
            self.vacunar()
        else:
            print("Su mascota está al día con la vacuna")

    def datos_mascota(self):
        print("Nombre: ",self.nombre)
        print("Edad: ",self.edad)
        print("Color: ",self.color)
        print("Especie: ",self.__especie)
        print("Vacunado?: ",self.vacuna)

import numpy as np

gato = mascota(color="dorado", especie="Felino")
perro = mascota(color="negro", especie="Cánido")
print(gato.nombre)
print(perro.nombre)
gato.registrar(nombre="Cosmo")
perro.registrar(nombre="Spyke")
print(gato.nombre, gato.color, "||", perro.nombre, perro.color)
print(gato.vacuna)
gato.vacunar()
print(gato.vacuna)

gato.asignar_edad(2)
gato.datos_mascota()

gato = mascota(color="blanco", nombre="Felix", especie="Felino")
pajaro = mascota("amarillo", especie="Ave")
pajaro.registrar("Pedro")
pajaro.asignar_edad(2)
pajaro.datos_mascota()
pajaro.vacunar()
pajaro.datos_mascota()
pajaro.vacunar()

perro = mascota("Negro", "Mora", "Perro", "Pequeño")
perro.asignar_edad(4)
perro.vacunar()

from prompt_toolkit import output
import time
fecha = np.random.randint(1,12,1)
print(fecha)

for i in range(fecha[0], 12, 1):
    print(fecha, i)
    perro.seguimiento_vacuna(i)
    time.sleep(2)
    clear_output()

class avatar:
    def __init__(self, nombre, raza, reino, elemento):
        self.nombre = nombre
        self.raza = raza
        self.reino = reino
        self.__nivel = 0
        self.elemento = elemento


    def subir_nivel(self, experiencia):
        self.__nivel = self.__nivel + 0.01*experiencia/self.__nivel

    def habilidad(self):
        elementos = ["fuego", "agua", "tierra", "aire"]
        elemento = input("Que habilidad desea para su avatar?")
        while elemento not in elementos:
            print("Ese elemento no está disponible")
            elemento = input("Que elemento desea para su avatar?")
        self.elemento = elemento

    def mostrarnivel(self):
        print(f"el nivel es {self.__nivel}")
        self.__condecoracion()

    def __condecoracion(self):
        if self.__nivel>3 and self.__nivel <=5:
            self.raza = f"Novato {self.nombre}"
        elif self.__nivel>5 and self.__nivel<8:
            self.raza = f"Teniente {self.nombre}"
        else:
            pass

lazaro = avatar("lazaro", "orco", "vikingo", 1, None)
lazaro.habilidad()

lazaro.subir_nivel(5500)
lazaro.mostrarnivel()
lazaro.raza

lazaro.subir_nivel(100)
lazaro.mostrarnivel()
print(lazaro.raza)

a = [1,2,3,4,5]
b = 12
if b not in a:
    print("contenido")
else:
    print("no lo contiene")

lazaro.habilidad()

try:
    printw("jdsaidasi")
except:
    print("archivo no encontrado")

class mascotas(avatar):
    def __init__(self, nombre, raza, reino, nivel, elemento, tamano, ventaja):
        self.nombre = nombre
        self.raza = raza
        self.reino = reino
        self.nivel = nivel
        self.elemento = elemento
        self.__tamano = tamano
        self.ventaja = ventaja

    def mostrarventaja(self):
        print(f"La ventaja es: {self.ventaja}")

mascota = mascotas("Kitty", "Gato", "Mininos", 1, None, 2, "Curador")

mascota.mostrarventaja()

class persona:
    def __init__(self, nombre, id, edad, saldo):
        self.nombre = nombre
        self.edad = edad
        self.id = id
        self.reporte = False
        self.saldo = saldo
        self.sucursal = "bello"
    def identi(self):
        print(f"Nombre:{self.nombre} \n Edad:{self.edad} \n cc:{self.id}")

    def reportar(self):
        self.reporte = True
    def liberar(self):
        self.reporte = False

class cdt(persona):
    def __init__(self, nombre, id, edad, saldo):
        self.nombre = nombre
        self.edad = edad
        self.id = id
        self.saldo = saldo
        self.retorno = 0

    def abrir(self, monto, plazo):
        interes_mensual = 0.012
        self.retorno = monto + monto*interes_mensual*plazo

    def mostrar_retorno(self):
        print(f"el retorno es: {self.retorno}")

arturo = cdt("arturo", 1018293477, 32, 28000000)
arturo.abrir(10000000, 12)
arturo.mostrar_retorno()

class op_mat():
    def __init__(self, n1:float, n2:float):
        self.__n1 = n1
        self.__n2 = n2
        self._resultado = 0

    def suma(self):
        self._resultado = self.__n1 + self.__n2


    def resta(self):
        self._resultado = self.__n1 - self.__n2


    def multiplicacion(self):
        self._resultado = self.__n1 * self.__n2


    def division(self):
        if self.__n2 == 0:
            print("No se puede dividir")
        else:
            self._resultado = self.__n1 / self.__n2

    def bar(self):
        x=np.arange(3)

        self._resultado = self.suma()
        y = [self.__n1, self.__n2, self._resultado]
        plt.bar(x,y)
        self._resultado = self.resta()
        y = [self.__n1, self.__n2, self._resultado]
        plt.bar(x,y)

calculadora = op_mat(5,8.7)
calculadora.multiplicacion()

calculadora.suma()
print(calculadora._resultado)
calculadora.resta()
print(calculadora._resultado)
calculadora.multiplicacion()
calculadora._resultado

